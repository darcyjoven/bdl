<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>function on BDL教程</title>
    <link>https://bdl.darcyjoven.com/categories/function/</link>
    <description>Recent content in function on BDL教程</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 27 Aug 2023 16:11:25 +0800</lastBuildDate><atom:link href="https://bdl.darcyjoven.com/categories/function/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.函数的参数</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/15.function_plus/1.parameter/</link>
      <pubDate>Sun, 27 Aug 2023 16:11:25 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/2.medium/15.function_plus/1.parameter/</guid>
      <description>函数的参数#在BDL中除了变量定义，其它所有操作都需要在函数中进行。
所以能够灵活使用函数是编程能力重要体现，使用函数时，除了程序逻辑需要考虑，如何定义函数的结构也是值得考虑的。
函数的结构包括两部分，参数与返回值。
参数个数#函数的参数个数是无上限的，且不是必须含有参数。
&amp;laquo;&amp;laquo;&amp;laquo;&amp;lt; HEAD#0个参数#       1d67cdd5786f4fafd74c3017d23ade5bb17724be 如果你的函数不受程序的上下文影响，或者说不需要考虑调用之前做了哪些操作，那么你的函数就不要参数。
       BDL自带函数中有不少类似函数如下：
fgl_lastkey() --获取最后一次按下的按键 &amp;laquo;&amp;laquo;&amp;laquo;&amp;lt; HEAD#任意个数参数#任意个数的参数需要在在定义function时就确认，参数时变量的一种，需要定义在函数体的括号中，由,作为分隔符。
在函数中还必须定义所有参数的数据类型。 调用时传入的参数需要和定义的参数个数一样，且数据类型一致(可以转换的数据类型会自动转换)。
main  display add(1,&amp;#39;2&amp;#39;,3,&amp;#39;4&amp;#39;,...,n) end main function add(x1,x2,x3,x4,...,xn)  return x1+x2+x3+x4+...+xn function 参数类型#字符串、数值参数#在BDL中，基本类型只有两种字符串和数值，如果参数是这两种基础类型之一，那么参数是将实际的值传递到函数中。
例如：
main  define x,y string  define i,j integer  let x = &amp;#39;demo&amp;#39;  let i = 2  let j = 3  display sfmt(&amp;#39;add(i,j) is %1,i is %2 ,j is %3&amp;#39;,add(i,j),i,j)   let y = ext(x)  display sfmt(&amp;#34;x is %1 y is %2&amp;#34;,x,y) end main function add(a,b)  define a,b integer  let a = a + 1  let b = b + 1  return a+b end function function ext(x)  define x string  let x = x+&amp;#34;.</description>
    </item>
    
    <item>
      <title>1.什么是函数</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/1.what-is-function/</link>
      <pubDate>Thu, 20 Jul 2023 10:09:06 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/1.what-is-function/</guid>
      <description>什么是函数&amp;ndash;根据输入进行处理返回输出#代码编多了会发现一个问题:一些通用的操作，比如交换两个变量的值、对一组变量进行排序等，可能在多个程序中都会用到，不仅如此，在单独一个程序中也可能会对某个代码段执行多次。
问题
有必要在每次执行时都把该代码段书写一次吗?这不仅会让程序变得很长，而且难以理解，使可读性下降。
分割#为了解决以上问题，C语言将程序按功能分割成-.系列的小模块，所谓“小模块”，可理解为完成-定功能的可执行代码块，称之为“函数”。
函数是BDL语言源程序的基本功能单位，打个比方，可以将函数视为一个黑盒子，或“加工设备”，从一头输人数据(原材料),从另一头就可以得到结果(产品)。至于函数内部是如何工作的，外部并不关心。 C语言源程序均是由函数组成的，在前面章节中给出的示例代码，只有一个main函数，这仅适用于比较简单的问题，实际的程序往往由多个函数组成。函数的调用是由另&amp;ndash;个函数发起的，举例来说，在A函数中调用B函数，从B函数的角度上说，A函数可视为外部函数,外部函数A对“函数B是如何定义的，功能是如何实现的”毫不关心，A对B所知道的仅限于输入给B什么，以及B输出什么。
标准函数、lib/sub函数和自定义函数#为了方便解决一些基本问题，BDL语言提供了一些标准函数。 除此之外，tiptop gp和T100都集成了一些经常使用的函数。
 注意这是产品提供的，不是BDL语言提供的，可以被修改，增加。
 除了上述函数外，BDL也允许用户自定义函数以便灵活解决各种问题，用户可以将自己的算法编写为一个个相对独立的函数模块，用调用的方法来使用函数。
从某种程度上说，BDL全部功能都是由这样或那样的函数实现的。</description>
    </item>
    
    <item>
      <title>2.自定义函数</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/2.diy-function/</link>
      <pubDate>Thu, 20 Jul 2023 10:57:44 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/2.diy-function/</guid>
      <description>自定义函数#函数的调用可能是由另一个函数触发，但函数的定义都是平行的，包括main函数在内。所谓“平行”，有两层含义，一是“不允许把一个函数定义在另一个函数内”，这说明，函数定义都要在main函数外部，二是“不同函数定义放置位置没有关系”，可以定义在main函数之前，也可以定义在main函数之后。
函数定义的语法#和变量一样，要想使用一个函数，定义是不可缺少的。
函数定义有4个要素:参数列表、返回值、函数名和函数体， 参数列表和返回值对应着输入输出， 函数名用于和程序中其他程序实体区分， 而函数体是一段可执行的代码块，实现特定的算法或功能。
函数的基本定义语法如下：
function 函数名(参数列表)  define 参数... --参数类型定义  函数体 end function  输入：参数列表  参数列表的基本形式为：
变量名1,变量名2,变量名3... 每个变量名在函数内必须定义数据类型，有些情况下，不需要像函数传递参数，此时，参数列表为空，但圆括号不能省略。 例如：
function printa()display &amp;#34;a&amp;#34;end function 输出：返回值  返回值用户返回函数的输出值。 格式如下:
return 输出值1,输出值2,... 如果没有输出值，可以只写一个return这个时候函数结束，但不返回任何值。
函数名  函数名用于标示该函数，和其它函数区分开来，因此和变量取名一样，函数名必须是合乎编译器命名规则的标识符。
函数体  函数体是一段用于实现特定功能的代码块，比如局部变量声明和其它执行语句等。注意，在函数体内声明的变量不能和参数列表中的变量同名。
函数体可以没有任何语句，此时称为空看书，表示占一个位置，以后可以将空能实现添加上。
在做软件开发规划时，这是一个经常使用的方法，在开发初期，为了在功能木块切割的同时维护程序的总体性。常常时先使用一个个的空函数将程序的框架搭起来，再逐步添加功能使程序一步步完善起来。</description>
    </item>
    
    <item>
      <title>4.函数调用</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/3.composition_of_bdl/4.call-function/</link>
      <pubDate>Mon, 17 Jul 2023 15:30:22 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/3.composition_of_bdl/4.call-function/</guid>
      <description>函数调用#看如下代码
 display sfmt(&amp;#34;\nhello world&amp;#34;) 这一行我们调用了，一个sfmt的函数，小括号中内的双引号括起来的文字是sfmt函数的参数。
该函数的功能就是把小括号的文字变为字符串，而display的功能就是将一个字符串功能打印出来。如果双引号内容改变，打印在控制台的内容也会改变。
说明
“\n”在这里有特殊的含义，读者可以发现“\n”并没有在屏幕中打印出来。
“\n”中的“\”是转义字符，表示其后面紧跟的字符有专门的意思。“\n” 表示将光标移到第二行第一格。也就是回车换行的意思。
请读者注意函数定义和函数调用有如下的不同之处。
 简单地说，所谓函数定义就是程序员编写程序代码，去实现函数的功能。  请读者注意，定义好的函数不-定会被调用。
比如BDL语言提供的大批库函数都已经实现，但是程序员编写程序并不会用到库函数中的每一个函数，只是从中挑选有用的库函数来使用。
函数调用就是调用已经编写好的函数，这些已经编写好的函数，可以是程序员自己编写的，叫做自定义函数；有的是BDL语言系统提供的函数，叫做库函数；有的是第三方提供的函数，叫做第三方库函数。BDL语言系统向程序员提供了非常丰富的库函数，以方便程序员使用。  本例中，sfmt函数被主函数main调用。sfmt函数的定义读者是看不见的，当然也看不见sfmt函数的代码，也就不清楚sfmt函数是如何实现的。</description>
    </item>
    
    <item>
      <title>7.设计一个BDL函数</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/3.composition_of_bdl/7.create-a-function/</link>
      <pubDate>Mon, 17 Jul 2023 16:20:12 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/3.composition_of_bdl/7.create-a-function/</guid>
      <description>设计一个BDL函数#用BDL语言库函数和第三方提供的函数组装程序是程序设计的&amp;ndash;条捷径和重要方法。但是，一个BDL程序不可能只由一个main函数组成，不能在main函数中实现所有的功能。编写程序，更多的时候需要程序员自己动手创建新的函数。
在main函数中计算3个整数的平均数#先看以下代码
databse ds main  define a,b,c,y integer --定义abc为整型  let a = 1 --赋值  let b = 2 --赋值  let c = 3 --赋值  let y = (a+b+c)/3 --进行数字计算  display sfmt(&amp;#34;\n the average is %1&amp;#34;,y) end main 编译后运行，程序输出为
the average is 2 代码解析
 main 不再赘述 define a,b,c,y integer 定义变量为整形， let ...= 1,2,3 变量赋初始值 let y = (a+b+c)/3  向编译器声明变量y为整型变量。计算a+b+c的值得到6，再整除3，得到2。 然后将2赋值给y。 “()&amp;ldquo;在这里同数学里的四则运算中的小括号“()”一样，表示需要优先运算。 “/”相当于四则运算中的除法运算。</description>
    </item>
    
  </channel>
</rss>
