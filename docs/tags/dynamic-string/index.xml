<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dynamic string on BDL教程</title>
    <link>https://bdl.darcyjoven.com/tags/dynamic-string/</link>
    <description>Recent content in dynamic string on BDL教程</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 20 Jul 2023 18:03:04 +0800</lastBuildDate><atom:link href="https://bdl.darcyjoven.com/tags/dynamic-string/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.动态长度字符串</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/12.string/1.dynamic-string/</link>
      <pubDate>Thu, 20 Jul 2023 18:03:04 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/2.medium/12.string/1.dynamic-string/</guid>
      <description>动态长度字符串#我们知道BDL中可以存放数据类型的类型有好几种，string、char、varchar。text和byte有特殊不再本章讨论范围。
对于定长类型varchar、char也不再本章讨论范围内。之后所说字符串特指string类型的字符串。
所以要处理除了string类型的字符串，需要先转换为string类型。
如果最大长度允许，string 与char、varchar在大部分地方都可以自动转换。但在SQL语句中无法自动转换。
注意
BDL4.01版本之后string类型也可以用于SQL中。
字符串的方法#字符串的处理，就是通过BDL预定义的方式实现的，因为方法是绑定数据类型，所以char和varchar都是不能调用字符串string的方法的。
拼接字符串#语法
append(a string) returning s string 使用案例
define s stringlet s = &amp;#34;darcy&amp;#34;let s = s.append(&amp;#34;.joven&amp;#34;) 除了调用方法，拼接字符串还有很多其它方式。
逗号拼接 define s string let s = &amp;#34;darcy&amp;#34;,&amp;#34;.joven&amp;#34; 这是最常用的字符串拼接方法 2. ||拼接
define s string let s = &amp;#34;darcyjoven&amp;#34;||&amp;#34;&amp;#39;s blog&amp;#34; 这种方式与逗号拼接区别在于，不能存在空值，有任意一个字符串为空值，最后的结果都为空值 3. sfmt()拼接
define s string let s = sfmt(&amp;#34;darcy%1&amp;#34;,&amp;#34;joven&amp;#34;) sfmt()拼接的好处在于：非字符串类型为显示转换。
字符串比较#equals(s string) return b boolean 使用示例：</description>
    </item>
    
  </channel>
</rss>
