<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>annotation on BDL教程</title>
    <link>https://bdl.darcyjoven.com/tags/annotation/</link>
    <description>Recent content in annotation on BDL教程</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 17 Jul 2023 15:01:24 +0800</lastBuildDate><atom:link href="https://bdl.darcyjoven.com/tags/annotation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2.为何要注释</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/3.composition_of_bdl/2.annotation/</link>
      <pubDate>Mon, 17 Jul 2023 15:01:24 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/3.composition_of_bdl/2.annotation/</guid>
      <description>注释&amp;ndash;为何有必要在代码里留下程序员的解释#database ds --连接数据库 main # 入口函数 display sfmt(&amp;#34;hello world&amp;#34;) {打印} end main 以上代码中出现最多的是“&amp;ndash;”，“#”和“{}”后面或中间包含中文，这些就是注释。
注释是用来帮助程序员阅读源代码和理解源代码的。 编译器在编译时候，会把注释剔除掉然后再进行编译，当前编译器是不会修改源文件，这些都是在内存中完成。 由于对于注释部分忽略不处理，就如同没有这些字符一样，所以注释不会增加编译后的文件长度，对程序运行不起任何作用。对于注释，有以下几点说明。
BDL的注释 由“&amp;ndash;”，“#”行注释，和“{}”包裹起来的块注释对。 编译器将行注释后的任何文件，和块注释包裹起来的任何文件都不予处理。 例如 {这些都是注释}--这些都是注释#这个有 空格 注释可以放在任何地方。通常，把注释放在要描述的代码上方，比较合适。对比比较短的代码，也可以放在后面。 注释和代码一定要同步更新。 代码修改而注释不做改变，这样的事情再实际开发中经常看见，而这一的情况可能带来严重后果。 注释内部不能再出现注释 {{这是不允许的}} 适量和恰当的注释是良好的编程风格的重要体现。 注释可以用来概括程序的算法、标识变量和函数的意义，或者解释一段代码的意图。 但是在代码中混杂过多的注释会使得程序更难以理解，反而影响代码阅读。</description>
    </item>
    
  </channel>
</rss>
