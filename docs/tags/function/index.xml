<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>function on BDL教程</title>
    <link>https://bdl.darcyjoven.com/tags/function/</link>
    <description>Recent content in function on BDL教程</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 20 Jul 2023 10:57:44 +0800</lastBuildDate><atom:link href="https://bdl.darcyjoven.com/tags/function/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2.自定义函数</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/2.diy-function/</link>
      <pubDate>Thu, 20 Jul 2023 10:57:44 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/2.diy-function/</guid>
      <description>自定义函数#函数的调用可能是由另一个函数触发，但函数的定义都是平行的，包括main函数在内。所谓“平行”，有两层含义，一是“不允许把一个函数定义在另一个函数内”，这说明，函数定义都要在main函数外部，二是“不同函数定义放置位置没有关系”，可以定义在main函数之前，也可以定义在main函数之后。
函数定义的语法#和变量一样，要想使用一个函数，定义是不可缺少的。
函数定义有4个要素:参数列表、返回值、函数名和函数体， 参数列表和返回值对应着输入输出， 函数名用于和程序中其他程序实体区分， 而函数体是一段可执行的代码块，实现特定的算法或功能。
函数的基本定义语法如下：
function 函数名(参数列表) define 参数... --参数类型定义 函数体 end function 输入：参数列表 参数列表的基本形式为：
变量名1,变量名2,变量名3... 每个变量名在函数内必须定义数据类型，有些情况下，不需要像函数传递参数，此时，参数列表为空，但圆括号不能省略。 例如：
function printa()display &amp;#34;a&amp;#34;end function 输出：返回值 返回值用户返回函数的输出值。 格式如下:
return 输出值1,输出值2,... 如果没有输出值，可以只写一个return这个时候函数结束，但不返回任何值。
函数名 函数名用于标示该函数，和其它函数区分开来，因此和变量取名一样，函数名必须是合乎编译器命名规则的标识符。
函数体 函数体是一段用于实现特定功能的代码块，比如局部变量声明和其它执行语句等。注意，在函数体内声明的变量不能和参数列表中的变量同名。
函数体可以没有任何语句，此时称为空看书，表示占一个位置，以后可以将空能实现添加上。
在做软件开发规划时，这是一个经常使用的方法，在开发初期，为了在功能木块切割的同时维护程序的总体性。常常时先使用一个个的空函数将程序的框架搭起来，再逐步添加功能使程序一步步完善起来。</description>
    </item>
    
    <item>
      <title>4.函数调用</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/3.composition_of_bdl/4.call-function/</link>
      <pubDate>Mon, 17 Jul 2023 15:30:22 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/3.composition_of_bdl/4.call-function/</guid>
      <description>函数调用#看如下代码
display sfmt(&amp;#34;\nhello world&amp;#34;) 这一行我们调用了，一个sfmt的函数，小括号中内的双引号括起来的文字是sfmt函数的参数。
该函数的功能就是把小括号的文字变为字符串，而display的功能就是将一个字符串功能打印出来。如果双引号内容改变，打印在控制台的内容也会改变。
说明
“\n”在这里有特殊的含义，读者可以发现“\n”并没有在屏幕中打印出来。
“\n”中的“\”是转义字符，表示其后面紧跟的字符有专门的意思。“\n” 表示将光标移到第二行第一格。也就是回车换行的意思。
请读者注意函数定义和函数调用有如下的不同之处。
简单地说，所谓函数定义就是程序员编写程序代码，去实现函数的功能。 请读者注意，定义好的函数不-定会被调用。
比如BDL语言提供的大批库函数都已经实现，但是程序员编写程序并不会用到库函数中的每一个函数，只是从中挑选有用的库函数来使用。
函数调用就是调用已经编写好的函数，这些已经编写好的函数，可以是程序员自己编写的，叫做自定义函数；有的是BDL语言系统提供的函数，叫做库函数；有的是第三方提供的函数，叫做第三方库函数。BDL语言系统向程序员提供了非常丰富的库函数，以方便程序员使用。 本例中，sfmt函数被主函数main调用。sfmt函数的定义读者是看不见的，当然也看不见sfmt函数的代码，也就不清楚sfmt函数是如何实现的。</description>
    </item>
    
    <item>
      <title>7.设计一个BDL函数</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/3.composition_of_bdl/7.create-a-function/</link>
      <pubDate>Mon, 17 Jul 2023 16:20:12 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/3.composition_of_bdl/7.create-a-function/</guid>
      <description>设计一个BDL函数#用BDL语言库函数和第三方提供的函数组装程序是程序设计的&amp;ndash;条捷径和重要方法。但是，一个BDL程序不可能只由一个main函数组成，不能在main函数中实现所有的功能。编写程序，更多的时候需要程序员自己动手创建新的函数。
在main函数中计算3个整数的平均数#先看以下代码
databse ds main define a,b,c,y integer --定义abc为整型 let a = 1 --赋值 let b = 2 --赋值 let c = 3 --赋值 let y = (a+b+c)/3 --进行数字计算 display sfmt(&amp;#34;\n the average is %1&amp;#34;,y) end main 编译后运行，程序输出为
the average is 2 代码解析
main 不再赘述 define a,b,c,y integer 定义变量为整形， let ...= 1,2,3 变量赋初始值 let y = (a+b+c)/3 向编译器声明变量y为整型变量。计算a+b+c的值得到6，再整除3，得到2。 然后将2赋值给y。 “()&amp;ldquo;在这里同数学里的四则运算中的小括号“()”一样，表示需要优先运算。 “/”相当于四则运算中的除法运算。
display sfmt(&amp;quot;\n the average is %1&amp;rdquo;,y) 在控制台中打印出y的值 这段代码计算1、2、3三个整数的平均值，最后正确打印出结果来。</description>
    </item>
    
  </channel>
</rss>
