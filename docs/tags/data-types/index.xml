<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data types on BDL教程</title>
    <link>https://bdl.darcyjoven.com/tags/data-types/</link>
    <description>Recent content in data types on BDL教程</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 18 Jul 2023 08:10:23 +0800</lastBuildDate><atom:link href="https://bdl.darcyjoven.com/tags/data-types/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3.数据类型</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/4.how_save_and_get_data/3.data-types/</link>
      <pubDate>Tue, 18 Jul 2023 08:10:23 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/4.how_save_and_get_data/3.data-types/</guid>
      <description>数据类型#BDL语言规定，程序中使用的每一个数据，必须指定其数据类型。
BDL语言数据类型
graph TD;BDL语言数据类型--&gt;构造类型BDL语言数据类型--&gt;基本类型构造类型--&gt;数组构造类型--&gt;结构体基本类型--&gt;字符串类型基本类型--&gt;数值类型数值类型--&gt;整型数值类型--&gt;浮点型graph TD;整型--&gt;DATE整型--&gt;BINGINT整型--&gt;INTEGER整型--&gt;SMALLINT整型--&gt;TINYINT整型--&gt;BOOLEANgraph TD;浮点型--&gt;c[&#34;FLOAT[(p)]&#34;]浮点型--&gt;d[&#34;SMALLFLOAT&#34;]浮点型--&gt;e[&#34;DECIMAL[(p[,s])]&#34;]浮点型--&gt;f[&#34;MONEY[(p[,s])]&#34;]graph TD;字符串类型--&gt;a[&#34;CHAR[(n)]&#34;]字符串类型--&gt;b[&#34;VARCHAR[(n[,r])]&#34;]字符串类型--&gt;STRING字符串类型--&gt;BYTE字符串类型--&gt;TEXT基本类型是最基础的简单数据类型，其值无法再分解为其它类型 构造数据类型：顾名思义，构造数据类型是根据已经定义的一个或读个数据类型用构造的方法来定义的。 构造数据类型有多个其它数据类型组合而成。 一个构造类型的值可以分解成若干个成员或元素。 其中每个成员要么是一个基本数据类型，要么又是一个构造类型。 再BDL语言中构造类型又以下几种： 数组类型：所有元素都是同一类型。即数组类型是统一数据类型元素的集合 结构类型：不同数据类型的组合 本节只介绍基本数据类型，其它数据类型再后续陆续介绍。
整数类型#整数是日常生活和计算机中用得最频繁的数据类型，也比较容易理解。 整数从数学意义上来说就是从负无穷到正无穷之间的任意整型的数据，也就是任意自然数(如1、2、3、4、5)以及它们的负数或0。 如果用十进制表示一个自然数，十进制的位数越多，表示的整数也越大。 在计算机中用二进制表示数据，二进制的位数不能无限使用，所以在计算机中，整数有一定的大小限制，只能在一定的范围之内。 在以前内存“寸土寸金”的时代，哪怕是为了节约2个字节的内存，也是非常有必要的。
所以BDL语言的整数类型，又分为BINGINT8，INTEGER4，SMALLINT2，TINYINT1。
在BDL语言中，日期也是用整型标识的，DATE4,它和INTEGER4在内存中存储方式一致，并规定1899/12/31这一天为0，1900/01/01为1。
除了这些比较大的整数还有一个1位的整型BOOLEAN，它只能保存1或者0。
请验证以下代码的运行值，后续所有代码不需要的地方都不会在包括main函数：
define a smallint let a = 32767 display a let a = a + 1 display a let a = a + 1 display a 整数的正负#浮点型#FLOAT[(p)]8</description>
    </item>
    
  </channel>
</rss>
