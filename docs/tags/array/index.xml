<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>array on BDL教程</title>
    <link>https://bdl.darcyjoven.com/tags/array/</link>
    <description>Recent content in array on BDL教程</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 20 Jul 2023 13:51:56 +0800</lastBuildDate><atom:link href="https://bdl.darcyjoven.com/tags/array/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.什么是数组</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/11.array/1.what-is-array/</link>
      <pubDate>Thu, 20 Jul 2023 13:45:07 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/2.medium/11.array/1.what-is-array/</guid>
      <description>什么是数组#程序经常使用同类型的数据，比如要处理某个班级的学生成绩信息，如果只有几个学生，我们可以使用几个同类型的变量，比如：define mark0, mark1, mark2, mark3, mark4 integer;` 这样，便可以存放5个学生的成绩，但如果是几百人呢?要一直这么写下去吗?如果读者觉得继续写下去没什么不妥的话，那几千甚至几万人呢!所以，如何合理组织大量同类数据是个问题。
在这种应用背景下，数组应运而生，成功解决了上述问题。
数组是一大片连续的存储空间#声明一个数组时，编译器为数组分配内存存储空间，以存放多个同型数据。每个数据称为数组的一个元素，要存储的元素个数称为数组的大小，元素的类型称为数组的类型。数据占据的内存空间大小取决于数组的大小和类型，而且，编译器为数组分配一片连续的内存空间。很容易计算数组占据的内存大小和每个元素对应的内存首地址。
下图，形象地示意了数组占据内存空间的情况，其中每个小方框代表一个内存字节，smallint占据2个内存字节，因此，数组中每个元素占据2个内存字节。
数组元素的访问#下面来看要解决的第2个问题“每个数据应当有唯一的标识符进行读写和查找”，这是通过下标来实现的。以一-维数组为例，元素的访问形式为:
数组名[下标] 举例来说，有一个数组，名为mark,里面记录着全班60个人的成绩，mark中的第1个元素可写为mark[1]，第2个元素为mark[2]，第3个元素为mark[3]，以此类推，第60个元素为mark[60]，好了，结束。有效的下标为1到N,不在此范围的下标访问都会引发越界错误。 线界错误是初学者经常犯错的地方。
了解了数组的基本组织形式，下面具体看一下如何使用数组解决实际问题。</description>
    </item>
    
    <item>
      <title>2.一维数组</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/11.array/2.one-dimensional-array/</link>
      <pubDate>Thu, 20 Jul 2023 13:51:56 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/2.medium/11.array/2.one-dimensional-array/</guid>
      <description>一维数组#一维数组也称向量，用以组织具有一维顺序关系的一组同类型数据，在使用数组前，必须先声明数组，编译器根据声明语句为其分配内存，这样数组才有意义。
一维数组如何定义#与简单数据类型一样，数组也由关键字define定义
define 数组名 array [size] of 类型 --定长数组 define 数组名 dynamic array of 类型 --动态长度数组 数组由两种形式：
指定长度的定长数组 不指定长度动态长度数组 一位数组的访问#之前我们提过，数组越界的错误，对于定长的数组，超过原来长度的访问，或程序奔溃。对于动态长度的数组，访问未经过初始化的长度的时候，会对之前没有初始化的索引赋空值。
我们通过一个例子看一下一位数组的访问方式：
define score array [6] of integer define sum,i integer define average decimal(10,2) prompt &amp;#34;请输入第1名学生的成绩&amp;#34; for score[1] prompt &amp;#34;请输入第2名学生的成绩&amp;#34; for score[2] prompt &amp;#34;请输入第3名学生的成绩&amp;#34; for score[3] prompt &amp;#34;请输入第4名学生的成绩&amp;#34; for score[4] prompt &amp;#34;请输入第5名学生的成绩&amp;#34; for score[5] prompt &amp;#34;请输入第6名学生的成绩&amp;#34; for score[6] for i = 1 to 6 let sum = sum + score[i] end for let average = sum/6 display sfmt(&amp;#34;\n平均成绩：%1&amp;#34;,average) 数值的初始化#上面我们说过动态数组访问超界时会将之前数组都赋值为null，如果每次都是这样，那么不小心写了一次array[1000]，那么这个数组长度之后都从1000后开始用吗？</description>
    </item>
    
  </channel>
</rss>
