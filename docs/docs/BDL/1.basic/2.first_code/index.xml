<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第二章 第一行代码 on BDL教程</title>
    <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/2.first_code/</link>
    <description>Recent content in 第二章 第一行代码 on BDL教程</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language><atom:link href="https://bdl.darcyjoven.com/docs/BDL/1.basic/2.first_code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.自己动手创建程序</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/2.first_code/1.wirte-program-by-youself/</link>
      <pubDate>Mon, 17 Jul 2023 13:19:56 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/2.first_code/1.wirte-program-by-youself/</guid>
      <description>自己动手创建程序#就像小学生解决应用题一样，在答题之前，必须了解题目给的条件，然后明确题目的问题，最后才是解题。 开发软件也需要这样一个过程，必须先清楚用户的需求，根据需求来进行设计和开发，不遗漏需求，也不能有超过需求的功能。
本章的目标就是创建一个可以执行的程序，并输出一句话：“Hello World”。如果读者看了这个要求就开始写代码，就烦了大忌。 这个需求起始很不明确，并没有规定如何输出这句话。 在实际的软件发开工作中，类似不明确的需求比比皆是，所以动手写代码前，一定要非常明确软件的需求。
很多曾经有过语言学习经理的读者看见上面的需求后，第一印象，认为就是在控制台打印出这句话来，然后就开始思索如何设计程序了。 但假设用户需求是用人声读出这句话呢？发声也是一种输出！ 或者用户需求是在一个窗口界面输出这句话，甚至要求这句话的大小、样式、颜色符和某种规定，那么只在控制台打印“Hello World！”的程序是不符合要求的。 所以在开发软件前，用大量的时间进行实际需求的调研时非常有必要的。 否则，花费大量时间出来的程序可能没有任何价值。
更明确的修去时：在控制台程序中，输出依据简单的文字：“Hello World！”。具体要求明确后就可以开始程序设计了。
本章只是引导大家了解BDL语言，故没有输入，只有输出。</description>
    </item>
    
    <item>
      <title>2.BDL开发环境</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/2.first_code/2.environment_of_BDL/</link>
      <pubDate>Mon, 17 Jul 2023 13:31:16 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/2.first_code/2.environment_of_BDL/</guid>
      <description>BDL开发环境#本书所有代码运行的环境都在fjs-fgl-2.4版本，开发环境为linux系统。 本书不涉及环境如何部署。
项目目录结构#tiptop gp 和 t100 都有固定的项目结构，点此查看。 建议你在不影响正式使用的程序前提下，建立或修改程序代码。
tiptop gp编译#tiptop gp环境中需在代码对应的4gl目录下，运行命令r.c2 czzi001，czzi001是你建立的程序编号。即4gl文件去掉后缀名后的内容。
连接#tiptop gp连接命令为 r.l2 czzi001，注意：这里的czzi001不是4gl文件程序编号，而是在p_zz中注册的程序。所以在运行r.l2连接之前，你还需要做以下这些步骤。
新增p_zz资料 如果你现在还不知道p_zz作业的功能，没关系，现在你可以参考czzi001的内容，将czzi001替换为你的程序编号，czz替换为你的程序编号前三位。 需要注意的时czzi001.4gl 一般放在czz/4gl目录下，同样azzi001.4gl 也放在azz/4gl目录下，在你更进一步理解BDL的目录结构前，就一直按照这种方式建立新程序。
点击维护链接资料建立连接资料 (链接和连接是同一种说法的不同翻译) 新建程序时，会提示你无资料，是否建立，这里选择是。 看到下方有一笔路径为$CUST/czz/42m/czz_czzi001.42m的资料。 当后续我们程序更复杂时，会主动添加更多需要的连接资料。
最后保存时此弹窗的意思，是让你自动连接一次，可以选择是，连接失败也不要仅，只要资料有产生就可以。
t100编译#开始编辑代码#以上设置好之后，你就可以编辑代码了。
我用的vs code编辑器，配合Informix 4GL这款插件，所以代码可以高亮，不同的单次有不同的颜色，起到了提醒的作用。
除了vscode，t100自带的开发平台T100 design、submlime text、4js官方提供的genero studio等工具也能有高亮样式。
database ds -- 指定数据库，因为t100和tiptop gp有部分功能必须使用数据，所以这里必须先连接数据库 MAIN --主函数 入口点 DISPLAY &amp;#34;Hello World&amp;#34; -- 打印字符串 END MAIN 也许你注意到了，database是小写，MAIN是大写，在BDL语言中，大小写是不区分了，类似于SQL。你甚至了混合使用。</description>
    </item>
    
    <item>
      <title>3.编译运行</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/2.first_code/3.see-your-program/</link>
      <pubDate>Mon, 17 Jul 2023 14:08:41 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/2.first_code/3.see-your-program/</guid>
      <description>编译运行-欣赏你的杰作#使用之前我们说的编译连接命令，开始编译连接。如果成功将不会有错误提示，如果失败请检查一些你的代码，可以对比上一篇中的代码。
在czz/4gl目录下输入exe2 czzi001,将会显示以下内容。</description>
    </item>
    
    <item>
      <title>4.调试排错</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/2.first_code/4.debug/</link>
      <pubDate>Mon, 17 Jul 2023 14:17:28 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/2.first_code/4.debug/</guid>
      <description>调试排错-查看代码如何一步步执行#程序员的主要工作之一是编写代码。 代码从无到有，需要逐个字符输入，工作量显然比较大。 但实际上，编码容易调试难。
代码编写完毕后，程序员将会花费大量时间进行错误或者问题的排查、修改。 在电脑系统程序中，将隐藏着的一些未发现的缺陷、问题或者错误，成为bug。
debug&amp;ndash;由来#马克2号（Harvard Mark II）编制程序的格蕾丝·霍珀（Grace Hopper）是一位美国海军准将及计算机科学家，同时也是世界最早的一批程序设计师之一。有一天，她在调试设备时出现故障，拆开继电器后，发现有只飞蛾被夹扁在触点中间，从而“卡”住了机器的运行。于是，霍珀诙谐地把程序故障统称为“臭虫（BUG）”，把排除程序故障叫DEBUG，而这奇怪的“称呼”，竟成为后来计算机领域的专业行话。
调试水平的高低，很大程度上显示出程序员能力的高低。 可以说，不会调试的程序员，是不会开发出好的软件的。
幸好，无论tiptop gp还是t100都集成了调试工具，运行r.d2+ czzi001(t100为r.dg czzi001)。
看，除了我们写的代码还多了一些代码，这些是tiptop gp自动加上的代码，是已经打包在编译连接中的代码，所以我们无法去除，这也是我们必须要写第一行database ds的原因，这些自动增加的代码中需要连接数据库。
设置断点#断点是为了方便程序员在调试过程中观察程序内容个状态而专门设置的一种调试手段。
也是在调试模式下运行程序的过程中，当程序语句运行到设置的断电时，暂停程序运行，但是程序当时的内容、寄存器、上下文环境等数据都被保存，并且代码中指示出当前停留在代码哪一行。然后程序可以不慌不忙地利用调试器查看程序内部状态。
如何设置断点#在调试器中设置断点，先用鼠标或者方向键，将活动行移动到你需要设置断点的代码行上，然后按下F9键、点击Toggle按钮或者双击当前行即可设置断点，重复操作即可取消断点。
调试运行#设置完断点之后，可以通过F5键(Run/Cont按钮)在调试器中启动程序。程序启动后，当运行到断点代码行后，程序暂停
此时程序暂停于当前设置的断点代码行处，可以发现一个小箭头标识在终端行左侧。这表示当前运行的代码行。 此时这个程序已经运行起来，不过出于暂停状态，可以看到控制台没有“Hello World”输出，这表示当前代码行还未运行。 按F10键（Step Over按钮），可单步运行。每按一次F8键，就运行一行代码，直到程序运行结束。如果不想单步运行，可以直接F5键接着运行到下一个断点。如果后续没有断点，会直接运行到程序结束。 运行结束，程序提示正常退出 </description>
    </item>
    
    <item>
      <title>5.练习</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/2.first_code/5.practice/</link>
      <pubDate>Mon, 17 Jul 2023 14:48:01 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/2.first_code/5.practice/</guid>
      <description>练习#编程输出中文“你好，世界！”#输出5个空行，不显示任何字符或字#输出数字1、2、3、4、5，但是每行显示一个数字#</description>
    </item>
    
  </channel>
</rss>
