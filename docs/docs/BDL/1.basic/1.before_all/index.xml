<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第一章 踏上征程前的思想动员 on BDL教程</title>
    <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/1.before_all/</link>
    <description>Recent content in 第一章 踏上征程前的思想动员 on BDL教程</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language><atom:link href="https://bdl.darcyjoven.com/docs/BDL/1.basic/1.before_all/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.为什么学习（使用）BDL语言</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/1.before_all/1.why-dbl/</link>
      <pubDate>Mon, 17 Jul 2023 10:32:54 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/1.before_all/1.why-dbl/</guid>
      <description>为什么学习（使用）BDL语言#开发迅速#BDL配套的开发工具和GUI都是打包好，所以开发周期非常的短，也不需要考虑过多的事情。
程序易读性高#如果你使用过SQL查询语言，或者对数据库有一定了解，甚至对excel使用比较熟练，你会发现BDL的处理方式与它们非常相似。
不得不使用#你的公司使用了BDL语言的产品，现在要修改或者增加功能，不得不去读，写BDL程序。</description>
    </item>
    
    <item>
      <title>2.如何学好BDL语言</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/1.before_all/2.how-learn-dbl/</link>
      <pubDate>Mon, 17 Jul 2023 10:46:50 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/1.before_all/2.how-learn-dbl/</guid>
      <description>如何学好BDL语言#无论出于什么目的，一旦下定绝心学习BDL语言，就要端正自信，因为听过BDL用的少，和其它语言差异太多，所以觉得学不好，或者随便学学，是不可取的。只要你掌握一些方法，克服畏惧心理，不轻言放弃，是完全可以学好的。
多动手多求人#所有的问题都可以通过自己编写代码观察结果解决。凡是可以通过编写代码观察到结果的问题，都不应该成为一个问题。不会的，也不要太固执，多问问有经验的人。
多学习优秀代码#BDL相当灵活，即使写的代码不优秀，也可以编译后达到你的运行目标，但是有的代码可以使用更少的代码实现相同功能，或者代码更加具有复用价值。我相信你很容就能找到不错的BDL代码。
多以人类的思考方法来类比计算机#计算机需要什么数据、如何获取这些数据、得到后如何存放、如何处理、处理后如何表现等，对这些问题要多问写为什么，一旦理解了计算机处理这些问题的过程，编程就是一件异常轻松的事情了。
多了解可以直接使用的功能#如果你在使用tiptop gp t100，会有相当多的功能都已经做好成为函数，等待你的调用。请多了解有哪些函数可以使用。</description>
    </item>
    
    <item>
      <title>3.语言概述</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/1.before_all/3.what-is-language/</link>
      <pubDate>Mon, 17 Jul 2023 10:58:17 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/1.before_all/3.what-is-language/</guid>
      <description>语言概述#提到语言这个词，人们自然想到的是英语、汉语这样的自然语言，因为语言是任何人交互交流信息不可缺少的工具。而今天，计算机遍布了我们生活每一个角落，除了任何人之前的交互交流之外，我们必须和计算机交流。 用什么样的方式和计算机做最直接的交流呢？ 人们自然想到的是最古老也同时也是最方便的方式&amp;ndash;语言。
什么是语言#类比人类的语言，汉语言、英语言、法语言等，可以总结出语言有如下特点。
语言是用来交流沟通的 语言有独特的语法规则 什么是机器语言#计算机是一个忠实的仆人，时刻等候着主人的命令。 如何才能使计算机听话呢？ 当然是用计算机听得懂的语言去命令它了。 计算的大脑或者说心脏就是CPU，它控制着计算机的运作。 每种CPU都有自己的指令系统。 这个指令系统就是该CPU的机器语言。 机器语言是一组有0和1系列组成的指令码，这些指令码是由CPU制作厂商规定出来的，然后发布出来请程序员遵守。如下是某CPU指定系统的两条指令：
1000000 加1001000 减要让计算机完成相应的任务，就得用这样的语言去命令它。这样的命令不是一条两条，而是二十上百条。 由于不同型号计算机的指令系统即机器语言是不相同的，按照一种计算机的机器指令编制的程序，不能在另一种计算机上执行。
用机器语言编写程序，编程人员首先要熟悉所用计算机的全部指令代码和代码的含义。
在编写程序时，程序员得自己处理每条指令和每一数据存储分配得输入和输出，还得记住编程过程中每步所使用得工作单元处理处在何种状态，这是一件十分繁琐的工作，编写程序花费的时间往往是实际运行时间的几十倍或者几百倍。
而且，编出的程序全是0和1的指令代码，直观性差，还容易出错。
什么是汇编语言#在用机器语言编程的实践中，一批顽强而聪明的先行者发明了汇编语言&amp;ndash;一门人类可以比较轻松掌握编程语言。 只是这门语言计算机并不认识，人类还不能使用这门语言命令计算机做事情。
所以有一类专门的程序，既认识机器语言，又认识汇编语言，而且还很聪明，知道怎么把汇编语言翻译成机器语言。于是，人类和机器又有了一种新的交流方式，而且任何可以轻松地编写程序了。
上文提到过，不同CPU有不同指令系统，从而有不同机器语言与其对应。所以程序员用汇编语言编写程序，都要记住是在什么CPU上编写的。 程序员不仅要考虑程序涉及思路，还要熟记计算机的内部结构这种编程的劳动强度依然很大。
面向过程的语言#汇编语言和机器语言都是面向机器的，机器不同，语言也不同。 既然有办法汇编语言翻译成机器语言，难道就不能把其它更人性化的语言翻译成机器语言？ 1954年，Fortran语言出现了，其后续出现了其它类似语言。这批语言是程序员摆脱了计算机硬件的桎梏，把主要精力放在了程序涉及上，不再关注底层的计算机硬件。 这类语言被称为高级语言。同样得高级语言要被计算机执行，也需要由一个翻译程序将其翻译成机器语言，也就是编译程序。
这类高级语言解决问题的方法是分析出问题所需要的步骤，把程序看作是数据被加工的过程。 基于这类方法涉及的语言称为面向过程语言。C语言就是一种面向过程的程序设计语言。
什么是BDL语言#BDL语言相对于C语言，抽象程序更高，更少的代码可以做更多的事情。 但同样的由于抽象程序高，占用资源也比较高，无法与C语言这样比较底层的语言灵活处理问题，为了解决这个问题，BDL中可以直接调用C语言程序。</description>
    </item>
    
    <item>
      <title>4.程序开发生命周期</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/1.before_all/4.program-life-cycle/</link>
      <pubDate>Mon, 17 Jul 2023 11:28:31 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/1.before_all/4.program-life-cycle/</guid>
      <description>程序开发生命周期#在windows 下，利用记事本这个软件，输入并编辑文件可以保存一个.txt后缀名的文件。类似的还有.xlsx。它们都可以通过记事本或者excle这类的软件打开，但本身是无法运行或者展现内容的。
那么你有没有想过如何产生一个.exe可执行文件呢。
聪明的你一定知道了。 是的，通过编写某种语言的源代码，编译成功通过后，在经过链接，成功后就可以产生一个可执行的文件。这就是所谓的程序。
编写BDL源代码#关于环境的说明
如果你是使用鼎捷系列软件，那么你需要新建一个程序代码，如何建立本书不会介绍。
如果你要学习，可以见TIPTOP相关书籍，本书只介绍代码部分。
由于t100与tiptop gp编译和链接代码也不同，所以本书以tiptop gp命令为主，如果你使用不同的系统，请自行替换为你系统的代码。
例如：tiptop gp 使用r.l2 连接，t100使用r.l 连接。
为什么不以底层fgllink写呢，因为license原因，有的环境可能不允许使用这类命令，所以不再赘述。
编辑BDL源代码#编辑BDL源代码就是做如下工作：
逐个输入字符，如汉字、英文、标点符号或者其它可以用键盘输入的字符 通过插入、删除、移动、复制、粘贴等方法修改已经输入的字符 将输入修改完毕的所有字符保存到硬盘上 一篇由汉字、英文、标点符号或者其它可以用键盘输入的字符的内容被称作文本。 能够进行文字编辑的软件被称作编辑器。
通俗的将，源代码就是程序员输入编写的符和BDL语言语法规则的文本。 如下片段就是一段源代码:
main display smft(&amp;#34;Hello World!&amp;#34;) end main 扩展名用.4gl标识其为一个BDL源代码文件。源代码文件简称源文件。
编辑器的功能很大程度上能够帮助程序员提高工作效率。只要能输入文字的文本编辑软件都可以作为源代码编辑器。 如记事本软件、字处理软件Word、vs code等。但是专业程序员一般采用专业源代码编辑器，如业界鼎鼎有名的编辑工具由VI/VIM、Emacs/XEmacs等。 一个好的源代码编辑器、要求具备关键字着色功能（可以使用不同颜色标识代码的不同部分）、优秀的代码跳转功能、代码自动补全功能等。
编译BDL源代码#编译时BDL源代码翻译成用二进制指令标识的目标文件。 这里的目标文件与机器语言还有一段距离，并不是真正的机器语言，所以不能被计算机直接运行。
编译过程由编译系统程序完成。编译程序简称为编译器。编译程序运行后，自动对源程序进行句法和语法检查，当发现错误是，就将错误的类型和所在位置显示出来，帮助修改程序中的错误。 用户可以继续利用编辑器对源程序进行修改。修改后，重新编译，直到编译通过为止。
连接目标文件#多个源代码文件经过编译后产生了多个目标文件，此时还没有将其组合装备为一个可以运行的整体，因此计算机还是不能执行。
连接过程是用连接程序将目标文件、第三方目标文件、BDL语言提供的运行时的一些函数装配为一个完成的可执行的目标程序。
编译连接过程示例#有时候为了叙述方便，将编译和连接两个步骤，统一用编译一个词语代替，读者应该清楚实际经历了两步。
当源代码没有报错是，编译连接过程如下： 当编译时，不会产生目标文件，如下： 现在你可能还看不懂提示信息的含义，不用担心，后面章节会慢慢了解到。现在你只要关注如果源代码错误，会出现什么情况即可。
有时候编译通过了，但连接不一定通过。如下： 运行程序#BDL程序部署在服务器，在服务器端运行，需要本地电脑开启GDC客户端，并确定端口正确。
运行的命令为exe2 czzi001,czzi001为程序编号。</description>
    </item>
    
    <item>
      <title>5.开始你的第一个程序</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/1.before_all/5.write-your-fisrt-program/</link>
      <pubDate>Mon, 17 Jul 2023 13:15:18 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/1.before_all/5.write-your-fisrt-program/</guid>
      <description>开始你的第一个程序#使用你自己的编辑器，写一个输出&amp;quot;Hello World&amp;quot;的程序。 display &amp;#34;Hello World&amp;#34; 将你写的程序上传到服务器，并进行编译等一系列操作后，运行并测试是否能输出&amp;quot;Hello World&amp;quot; </description>
    </item>
    
  </channel>
</rss>
