<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第六章 运算符和表达式-程序基本构成 on BDL教程</title>
    <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/6.operators_and_expressions/</link>
    <description>Recent content in 第六章 运算符和表达式-程序基本构成 on BDL教程</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language><atom:link href="https://bdl.darcyjoven.com/docs/BDL/1.basic/6.operators_and_expressions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.运算符和表达式</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/6.operators_and_expressions/1.operators/</link>
      <pubDate>Tue, 18 Jul 2023 16:10:57 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/6.operators_and_expressions/1.operators/</guid>
      <description>认识BDL语言中的运算符和表达式#在前面的章节中，已经接触过运算符和表达式了。 可以说，运算符和表达式是BDL语言的最基本构成，没有运算符和表达式，则不能编写任何程序。 程序的任务是对数据进行处理，数据是程序处理的对象，而运算符是施加给这些数据的操作。数据和运算符是表达式的基本元素。
认识运算符和表达式#最近本的运算符，莫过于加、减、乘、除四则运算了
1+12*410-20100/3 由于键盘无法输出算数中的乘号(✖)，和出号(➗)，改用*和、代替。删改你的例子都是常量参与运算，在BDL中，变量也可以参与运算，如：
define a,b,c integer let a = 0 let b = 10 b - a a +b +10 a+b+10/b 上面的每一个式子都可以称为一个表达式。 BDL中的算术表达式和普通算术中的表达式写法基本一样，运算符两边是参与运算的对象，非常容易理解； 而有些语言，其表达式的写法非常古怪，让人望而生畏。 同样地，算术运算中，除数是不能为0的，在计算机中，如果除数为0，将产生一个“除数为0的异常”。 所以上面的示例中，有一个表达式因为除数为0，将使得程序运行崩溃。
另外在给变量赋值的时候，使用赋值运算符=，如：
let a = a+b+10/b let b = a+b+10 在介绍这个运算符的时候，特别强调了它和算术运算中的等号“=”的区别。 BDL中的“=”，是将右边的值赋给左边的变量，而并不表示等号两边相等。 在BDL中，要表示两边是否相等，可用“==”表示（你也可能见到过使用一个“=”比较大小的，这样语法也没问题，但建议使用两个），即两个等号连接在一起，用来检查等号两边是否相等。 类似这种进行两个对象的大小关系比较的运算，是一种关系运算。
操作数、运算符和表达式#参与运算的对象称做操作数（operator）。 如3+5中的3和5，a+b+10中的a，b和10，他们是参与具体预算的对象。同样地：
(3+5)*a 这个表达式中，对于运算符“*”，两边的操作数就分别是(3+5)和a。 可见，操作数也可以是比较复杂的对象。 3+5也可以看做是一个加法表达式。
运算符是指定要执行某项操作的一个标志符号，它指明了对操作数所进行的运算。 如“+”号，表示了一个相加运算;“==” 号表示了一个关系判断是否“ 相等”的运算。 表达式表示一个求值的规则。 表达式是由变量、常量、运算符、函数和圆括号按一定的规则组合而成的。 BDL语言的表达式可根据运算的不同而分为不同的表达式类型，如算术表达式、关系表达式、函数表达式等。一般来说，表达式有如下的书写规则。
运算符不能相邻。如a+-b是错误的。 乘号不能省略。如x乘以y应写成: x*y， 不能写成xy。 可用多层括号表示运算次序，括号必须成对出现，均使用小括号。 注意</description>
    </item>
    
    <item>
      <title>2.关系运算符</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/6.operators_and_expressions/2.relational-operator/</link>
      <pubDate>Wed, 19 Jul 2023 15:12:11 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/6.operators_and_expressions/2.relational-operator/</guid>
      <description>关系运算符和关系表达式#关系运算就是作比较，日常生活中经常遇到一些真假判断，比如说，“张三比李四高”，“济南到北京比到上海近”，“5大于2”，这些问题的答案是真或假。
程序设计是对实际问题解决过程的模拟，长城需要左判断，像“如果这样，我就执行动作A，如果那样，我就执行动作B”。
那么怎么判断这样那样呢？ 这就需要用到关系运算和关系表达式。
关系运算符号种类#关系运算就是比较变量或常量是否符和预期，比较结果为一个逻辑值“真”或“假”。 举个简单的例子，说“x&amp;lt;10”，如果x值为9，“9&amp;lt;10”成立，故上述式子的值为“真”，若x的值为15，则“15&amp;lt;10”不成立，上述式子的值为“假”。
BDL中，“真”和“假”也是用数值来体现的，0就是“假”，其它值为“真”。
关系运算符
运算符 描述 is null 判断控制 like 如果字符串和给定的格式匹配成功返回true matches 如果字符串和给定的格式匹配成功返回true 相同(==or=) 判断两个值是否相同 不相同(!=or&amp;lt;&amp;gt;) 判断两个值是否不相同 小于&amp;lt; 判断左边的值小于右边 小于等于&amp;lt;= 判断左边的值小于等于右边 大于&amp;gt; 判断左边的值大于右边 大于等于&amp;gt;= 判断左边的值大于等于右边 nvl() 如果第一参数为空，返回第二个参数 iif() 如果第一个参数为true,返回第二个参数，否则返回第三个参数 in() 判断值是否在一个范围内 运算顺序#关系运算符比算数运算符优先级低，这说明：
x+5&amp;gt;y-7和(x+5)&amp;gt;(y-7)是等价的。
以下是关系表达式的常见用法
define a ,b ,f integer define c ,d, e decimal(6,3) define s string let a = 1 let b = 2 let c = 1.51 let d = 2.</description>
    </item>
    
    <item>
      <title>3.逻辑运算符</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/6.operators_and_expressions/3.logical-operator/</link>
      <pubDate>Wed, 19 Jul 2023 15:36:30 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/6.operators_and_expressions/3.logical-operator/</guid>
      <description>逻辑运算符和逻辑表达式#逻辑运算符#关系表达式的输出结果为“真”和“假”，但关系表达式毕竟只能判断一次，实际问题常常遇到多个条件判断情况。 例如，“如果从济南到北京比上海近，并且明天不下雨，就去北京旅游”。 BDL语言遇到这种情况，就要使用逻辑运算符和逻辑表达式。
逻辑运算符
运算符 描述 not 如果右边表示大为true返回false，如果为flase，返回true and 如果左边和右边表达式都为true,返回true,否则false or 如果左边和右边表达式都为false,返回false,否则true 逻辑运算符#在计算机中，逻辑运算符可以理解为，``与 或 非`。
与（AND） “表达式1 and 表达式2”，只有当两个条件都为 非0 时，运算结果为非0，否则结果为0。
所有表达式是并且的关系，都成立时才认为成立，有任意一条不成立，就算不成立。
或（or） “表达式1 or 表达式2”，只有两个条件都为0时，运算结果才为0,否则为1。
所有表达式是或且的关系，都不成立的时候才不成立，有任意一条成立，就算成立。
非（not） “not 表达式”，取反，当表达式为0时，结果为1，当表达式为1时，结果为0。
所修饰的表达式成立那么就不成立，不成立就成立。
逻辑真值表#A B not A not B A and B A or B 真 真 假 假 真 真 真 假 假 真 假 真 假 真 真 假 假 真 假 假 真 真 假 假 总结以下：与运算就是“有一个假，结果为假”，或运算是“有一个真，结果为真”，非运算时“假变真，真变假”。</description>
    </item>
    
    <item>
      <title>4.赋值运算符</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/6.operators_and_expressions/4.assignment-operator/</link>
      <pubDate>Wed, 19 Jul 2023 15:52:27 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/6.operators_and_expressions/4.assignment-operator/</guid>
      <description>赋值运算符和赋值表达式#赋值运算时BDL中常见运算，一般用来改变变量的值。 BDL中提供了赋值运算符号let =，和函数返回值赋值returning两种估值方式。
赋值表达式#let = 赋值 之前我们已经多次使用let a = 1对变量进行赋值，我们可以看到使用这种方式赋值的方式，=左边是我们要赋值的变量，且只有一个。 =右边是我们要赋予的值。
let a = a + 1之前我们还是用过这样的方式进行求和，=右边作为一个整体计算结果之后，再赋值给=左边。
returning 函数返回值赋值 函数之后会详细讲解，我们现使用我们已经用过的sfmt()函数作为说明。
运行以下代码：
database ds define a,b,c integer MAIN define s string call to_day() returning s display s sleep 1 --这里是暂停一秒的意思，防止时间太接近而无法区分 let s = to_day() display s END MAIN function to_day() return current end function 我们可以看到以下内容，s的值被赋值了两次。
2023-07-19 16:03:11.275 2023-07-19 16:03:12.276 这说明使用let s = 函数()和call 函数() returning s两种方式都可以赋值给s，那么为什么还要使用第二种方式呢。</description>
    </item>
    
    <item>
      <title>5.类型转换</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/6.operators_and_expressions/5.type-conversion/</link>
      <pubDate>Wed, 19 Jul 2023 16:14:00 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/6.operators_and_expressions/5.type-conversion/</guid>
      <description>类型转换#前面章节中大家已经廖家，整数和浮点数在计算机中表示方法不同，占据的内存空间大小也有所不同。
如果某下时候，需要将一个integer类型数据存储到decimal类型变量中。此时就需要进行转换。这种不同类型的数据进行转换就称作类型转换。
自动转换#BDL中为了使编程简单，几乎所有数据类型都可以自动转换。 例如你可以写这种代码
define a integer let a = &amp;#34;12345.23&amp;#34; 字符串将自动转为整数12345，同样，整数也会自动转为字符串。
不过要注意之前我们说using的时候，数值类型转字符串会自动补空格。
但是如果我们要是一个无法理解的内容，会如何自动转换呢？
define a integer let a = &amp;#34;你好&amp;#34; 如果你在debug中查看会发现a的值会变为null，如果非法值转换，所有变量都会变为null，这将丢失之前变量的值!
哪些情况会自动转换呢#赋值 无论是let还是returning都会自动转换为目的变量类型
传参 参数部分后续会详细讲，sfmt(&amp;quot;%1&amp;quot;,1)这个函数中&amp;quot;%1和1就叫做参数，1会自动转为字符串。
SQL语句 select ima01 from ima_file where ima01 = 2234 SQL语句后续会详细讲，这里先知道有印象就好
字符串拼接 字符串可以用两种方式凭借,和||，这两种方式都会自动转为字符串</description>
    </item>
    
    <item>
      <title>6.运算符优先级</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/6.operators_and_expressions/6.operation-priority/</link>
      <pubDate>Wed, 19 Jul 2023 16:34:55 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/6.operators_and_expressions/6.operation-priority/</guid>
      <description>运算符优先级#BDL中运算符具有不同优先级和结合性。
在表达式中，各运算量参与运算的先后顺序不仅要遵守运算符优先级别的规定，还要受运算符集合的制约，以便确定自左向右进行运算还是自右向左预算。
优先级、结合性汇总#优先级 运算符 结合性 说明 用法 13 units 左 间隔转换 (12) units day 12 ** 左 幂 x**5 12 mod 左 求余数 x mod 2 11 * 左 乘法 x*y 11 / 左 除法 x/y 10 + 左 加法 x+y 10 - 左 减法 x-y 9 || 左 连接符 &amp;ldquo;ab&amp;rdquo; 8 like 右 字符串比较 mystring like &amp;ldquo;A%&amp;rdquo; 8 matches 右 字符串比较 mystring matches &amp;ldquo;A*&amp;rdquo; 7 in() 左 清单比较 var IN(&amp;lsquo;CA&amp;rsquo;,&amp;lsquo;NY&amp;rsquo;) 6 &amp;lt; 左 小于 a&amp;lt;10 6 &amp;lt;= 左 小于等于 a&amp;lt;=10 6 &amp;gt; 左 大于 a&amp;gt;10 6 &amp;gt;= 左 大于等于 a&amp;gt;=10 6 == 左 等于 a==10 6 &amp;lt;&amp;gt; or !</description>
    </item>
    
    <item>
      <title>7.练习</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/1.basic/6.operators_and_expressions/7.practice/</link>
      <pubDate>Wed, 19 Jul 2023 16:56:50 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/1.basic/6.operators_and_expressions/7.practice/</guid>
      <description>练习#测试以下代码输出#define m,n integer define x,y decimal(20,6) let m = 1 let n = 2 let x=1.41 let t=2.5 display sfmt(&amp;#34;\nm&amp;lt;n and y-1&amp;gt;x=%1&amp;#34;,m&amp;lt;n and y-1&amp;gt;x) display sfmt(&amp;#34;m&amp;lt;n or y-1&amp;gt;x=%1&amp;#34;,m&amp;lt;n or y-1&amp;gt;x) display sfmt(&amp;#34;not (y-1&amp;gt;x)=%1&amp;#34;,not (y-1&amp;gt;x)) 用笔计算处以下代码运行结果，然后键入系统。#看看笔算的结果和系统计算结果一样
define a,b integer let a=5 let b=4 display sfmt(&amp;#34;\n最后输出的结果是%1，但是a的值是%2&amp;#34;,a=2*8,a/4) let a=2*8 let a=a/4 display sfmt(&amp;#34;a的值是%1&amp;#34;,a) display sfmt(&amp;#34;a和b的比较结果是=%1&amp;#34;,a==b) </description>
    </item>
    
  </channel>
</rss>
