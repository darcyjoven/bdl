<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第十五章 函数进阶 on BDL教程</title>
    <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/15.function_plus/</link>
    <description>Recent content in 第十五章 函数进阶 on BDL教程</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language><atom:link href="https://bdl.darcyjoven.com/docs/BDL/2.medium/15.function_plus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.函数的参数</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/15.function_plus/1.parameter/</link>
      <pubDate>Sun, 27 Aug 2023 16:11:25 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/2.medium/15.function_plus/1.parameter/</guid>
      <description>函数的参数#在BDL中除了变量定义，其它所有操作都需要在函数中进行。
所以能够灵活使用函数是编程能力重要体现，使用函数时，除了程序逻辑需要考虑，如何定义函数的结构也是值得考虑的。
函数的结构包括两部分，参数与返回值。
参数个数#函数的参数个数是无上限的，且不是必须含有参数。
&amp;laquo;&amp;laquo;&amp;laquo;&amp;lt; HEAD#0个参数#1d67cdd5786f4fafd74c3017d23ade5bb17724be 如果你的函数不受程序的上下文影响，或者说不需要考虑调用之前做了哪些操作，那么你的函数就不要参数。
BDL自带函数中有不少类似函数如下：
fgl_lastkey() --获取最后一次按下的按键 &amp;laquo;&amp;laquo;&amp;laquo;&amp;lt; HEAD#任意个数参数#任意个数的参数需要在在定义function时就确认，参数时变量的一种，需要定义在函数体的括号中，由,作为分隔符。
在函数中还必须定义所有参数的数据类型。 调用时传入的参数需要和定义的参数个数一样，且数据类型一致(可以转换的数据类型会自动转换)。
main display add(1,&amp;#39;2&amp;#39;,3,&amp;#39;4&amp;#39;,...,n) end main function add(x1,x2,x3,x4,...,xn) return x1+x2+x3+x4+...+xn function 参数类型#字符串、数值参数#在BDL中，基本类型只有两种字符串和数值，如果参数是这两种基础类型之一，那么参数是将实际的值传递到函数中。
例如：
main define x,y string define i,j integer let x = &amp;#39;demo&amp;#39; let i = 2 let j = 3 display sfmt(&amp;#39;add(i,j) is %1,i is %2 ,j is %3&amp;#39;,add(i,j),i,j) let y = ext(x) display sfmt(&amp;#34;x is %1 y is %2&amp;#34;,x,y) end main function add(a,b) define a,b integer let a = a + 1 let b = b + 1 return a+b end function function ext(x) define x string let x = x+&amp;#34;.</description>
    </item>
    
    <item>
      <title>2.函数的返回值</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/15.function_plus/2.parament/</link>
      <pubDate>Mon, 28 Aug 2023 13:18:50 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/2.medium/15.function_plus/2.parament/</guid>
      <description>函数的返回值#上一节中我们讲到，函数结构由参数和返回值决定。
这节我们介绍函数的返回值。
返回值个数#和参数一样，函数的返回值个数可以是0，也可以是任意个。
0个返回值#main 函数就是一个无返回值的参数，没有函数能够接受main函数的返回值。 同时main也是一个没有参数的函数。
main end main function main() end function 在无返回值的函数中，依然可以使用关键字return，这时return关键字的作用是结束当前函数运行，返回调用函数处。
任意数量的返回值#和参数不一样，函数的返回值个数是不需要提前定义好的。在程序执行到return处，才能确定返回值的个数和数据类型。
所以一个函数在不同情况下调用，返回值的个数有可能不同。
注意
返回不同数量的值，影响程序后续维护，除非能够快速解决当前问题，否则建议函数总是返回相同数量的返回值。
虽然返回个数不会保存，单调用函数时，必须接受每一个返回值，所以调用时，你必须知道这个函数将要返回的返回值的个数。
返回值的返回，即return后面的常量或者变量，已,作为分隔符。
例如，以下代码返回2020年的月份，如果当前不是2020年，则返回当前年份和月份。
main define yy,mm integer if year(current) == 2020 then display currentYM() else call currentYM() returning yy,mm display yy,mm end if end main function currentYM() if year(current) != 2020 then return year(current),month(current) else return month(current) end if end function 返回值类型#字符串、数值#作为基础类型，字符串和数值返回时使用对应的变量调用即可。</description>
    </item>
    
    <item>
      <title>3.生命周期</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/15.function_plus/3.life-cycle/</link>
      <pubDate>Mon, 28 Aug 2023 13:54:57 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/2.medium/15.function_plus/3.life-cycle/</guid>
      <description>函数生命周期#编程就是写函数，main的开始结束就是程序的开始结束。
函数的开始就是函数调用，结束就是函数最后一行运行结束，或者运行到return处。
调用
call add() returning &amp;hellip; display add() let a = add() call minus(10,add()) &amp;hellip; graph LRa0([&#34;开始&#34;])--&gt;a[&#34;调用&#34;]a--&gt;b[&#34;执行语句&#34;]b--&gt;c[&#34;end funtion/return&#34;]c--&gt;d([&#34;结束&#34;])变量的生命周期#编程就是写函数，函数本质是什么呢？ 函数的本质是输入、处理、输出
输入的是变量，输出的是变量。处理的也是变量。
如果程序中一直增加功能，那么变量的数量会一直增加，如果不停增加下去，内存迟早有用完的一天。
但实际上一个规划良好的程序并不会将内存全部占用。
这是因为，在BDL中变量不是一直加载到内存中，有些变量用到的时候才会分配内存，不用的时候，内存会释放掉。
那么变量在定义时就会分配内存，那么什么时候释放其内存呢？
变量所在的作用域，所有语句执行完成时释放内存，在BDL中最小的作用域是函数。
所以在函数中定义的变量，在函数执行完后，变量就释放内存了。所以我们需要返回值，并用变量接受这个返回值。
定义在main函数之前的函数，在main执行结束后才能释放内存。
函数中定义的变量 graph LRa[&#34;函数调用&#34;]--&gt;b[[&#34;分配内存&#34;]]b--&gt;c((&#34;...&#34;))c--&gt;d[&#34;end funtion/return&#34;]d--&gt;z[[&#34;释放内存&#34;]]</description>
    </item>
    
    <item>
      <title>4.练习</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/15.function_plus/4.practise/</link>
      <pubDate>Mon, 28 Aug 2023 14:21:21 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/2.medium/15.function_plus/4.practise/</guid>
      <description>练习#生成一个长度为100的整数数组，并输出数组中可以被5整除的个数#长度100的整数数组，每个元素都为随机数，大于0且小于1000的整数 提示
util.Math.rand(100)可以获取小于等于100的随机整数。
import util main display util.Math.rand(100) end main 生成随机数功能写为一个函数，且接受两个参数，生成数组的长度和随机数最大整数 生成一个长度为50的整数数组，并从小到大排序，排序后输出到屏幕#随机数生成请参考上一题 </description>
    </item>
    
  </channel>
</rss>
