<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第十章 函数入门-写程序就是写函数 on BDL教程</title>
    <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/</link>
    <description>Recent content in 第十章 函数入门-写程序就是写函数 on BDL教程</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language><atom:link href="https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.什么是函数</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/1.what-is-function/</link>
      <pubDate>Thu, 20 Jul 2023 10:09:06 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/1.what-is-function/</guid>
      <description>什么是函数&amp;ndash;根据输入进行处理返回输出#代码编多了会发现一个问题:一些通用的操作，比如交换两个变量的值、对一组变量进行排序等，可能在多个程序中都会用到，不仅如此，在单独一个程序中也可能会对某个代码段执行多次。
问题
有必要在每次执行时都把该代码段书写一次吗?这不仅会让程序变得很长，而且难以理解，使可读性下降。
分割#为了解决以上问题，C语言将程序按功能分割成-.系列的小模块，所谓“小模块”，可理解为完成-定功能的可执行代码块，称之为“函数”。
函数是BDL语言源程序的基本功能单位，打个比方，可以将函数视为一个黑盒子，或“加工设备”，从一头输人数据(原材料),从另一头就可以得到结果(产品)。至于函数内部是如何工作的，外部并不关心。 C语言源程序均是由函数组成的，在前面章节中给出的示例代码，只有一个main函数，这仅适用于比较简单的问题，实际的程序往往由多个函数组成。函数的调用是由另&amp;ndash;个函数发起的，举例来说，在A函数中调用B函数，从B函数的角度上说，A函数可视为外部函数,外部函数A对“函数B是如何定义的，功能是如何实现的”毫不关心，A对B所知道的仅限于输入给B什么，以及B输出什么。
标准函数、lib/sub函数和自定义函数#为了方便解决一些基本问题，BDL语言提供了一些标准函数。 除此之外，tiptop gp和T100都集成了一些经常使用的函数。
注意这是产品提供的，不是BDL语言提供的，可以被修改，增加。
除了上述函数外，BDL也允许用户自定义函数以便灵活解决各种问题，用户可以将自己的算法编写为一个个相对独立的函数模块，用调用的方法来使用函数。
从某种程度上说，BDL全部功能都是由这样或那样的函数实现的。</description>
    </item>
    
    <item>
      <title>2.自定义函数</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/2.diy-function/</link>
      <pubDate>Thu, 20 Jul 2023 10:57:44 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/2.diy-function/</guid>
      <description>自定义函数#函数的调用可能是由另一个函数触发，但函数的定义都是平行的，包括main函数在内。所谓“平行”，有两层含义，一是“不允许把一个函数定义在另一个函数内”，这说明，函数定义都要在main函数外部，二是“不同函数定义放置位置没有关系”，可以定义在main函数之前，也可以定义在main函数之后。
函数定义的语法#和变量一样，要想使用一个函数，定义是不可缺少的。
函数定义有4个要素:参数列表、返回值、函数名和函数体， 参数列表和返回值对应着输入输出， 函数名用于和程序中其他程序实体区分， 而函数体是一段可执行的代码块，实现特定的算法或功能。
函数的基本定义语法如下：
function 函数名(参数列表) define 参数... --参数类型定义 函数体 end function 输入：参数列表 参数列表的基本形式为：
变量名1,变量名2,变量名3... 每个变量名在函数内必须定义数据类型，有些情况下，不需要像函数传递参数，此时，参数列表为空，但圆括号不能省略。 例如：
function printa()display &amp;#34;a&amp;#34;end function 输出：返回值 返回值用户返回函数的输出值。 格式如下:
return 输出值1,输出值2,... 如果没有输出值，可以只写一个return这个时候函数结束，但不返回任何值。
函数名 函数名用于标示该函数，和其它函数区分开来，因此和变量取名一样，函数名必须是合乎编译器命名规则的标识符。
函数体 函数体是一段用于实现特定功能的代码块，比如局部变量声明和其它执行语句等。注意，在函数体内声明的变量不能和参数列表中的变量同名。
函数体可以没有任何语句，此时称为空看书，表示占一个位置，以后可以将空能实现添加上。
在做软件开发规划时，这是一个经常使用的方法，在开发初期，为了在功能木块切割的同时维护程序的总体性。常常时先使用一个个的空函数将程序的框架搭起来，再逐步添加功能使程序一步步完善起来。</description>
    </item>
    
    <item>
      <title>3.函数调用与返回</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/3.formal-actual/</link>
      <pubDate>Thu, 20 Jul 2023 11:27:41 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/3.formal-actual/</guid>
      <description>函数调用与返回#形参和实参#请观察一下代码：
main define x,y,sum integer let x = 5 let y = 7 call add(x,y) returning sum display sum end main function add(a,b) define a,b integer return a + b end function 在上面代码中参数列表是a和b，而在函数调用时传递进来的参数是x和y，这两种参数是申明关系呢？ 打个形象的比方，这是角色和演员的关系。
函数定义时列表中参数为形数，是“剧本角色”，而函数调用时传递进来的参数称为实参，是“演员”，函数执行的过程就是演戏的过程。
程序刚开始执行的时候，系统并不为形参分配存储空间，因为它只是个角色，不是实体，一直要到函数调用时，系统为形参分配存储空间，并将实参的值复制给形参。
结合代码上面代码可知，在call add(x,y) returning sum语句调用前，a和b都不是真正的程序变量，一直到add函数被调用，a和b才被创建，并分别用x和y为其赋值，在这种情况下，在函数内对a和b的处理并不影响x和y，这类似于“ 某个演员扮演的角色在戏中受伤，并不是说演员真的受伤了”，而且，在函数执行结束返回时，创建的形参被撤销，这类似于“戏演完 了，剧中角色自然也就停止了”。
举例来看，下列示例代码先交换两个变量的值，但并没有成功，为什么?请试着用演员和角色的关系来解释一下。
--视图交换两个变量的值 main define num1,num2 integer display &amp;#34;&amp;#34; display sfmt(&amp;#34;num1 is %1,num2 is %2 &amp;#34;,num1,num2) call swap2Variable(num1,num2) display sfmt(&amp;#34;num1 is %1,num2 is %2 &amp;#34;,num1,num2) end mian function swap2Variable(a,b) define a,b,c integer display sfmt(&amp;#34;a is %1,b is %2 &amp;#34;,a,b) let c = a let a = b let b = c display sfmt(&amp;#34;a is %1,b is %2 &amp;#34;,a,b) end function 输出结果为：</description>
    </item>
    
    <item>
      <title>4.面向过程编程</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/4.process-oriented/</link>
      <pubDate>Thu, 20 Jul 2023 13:17:51 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/4.process-oriented/</guid>
      <description>面向过程的程序结构#在20世纪60年代计算机发展的初期，程序设计是少数聪明人的工具，程序员可以根据自己的喜好，像捏泥巴一样进行程序设计，注释几乎是一行没有，想到哪写到哪，大多数程序代码组织混乱，可以说只有设计者本人可以看懂，有的甚至设计者读起来也不知所以，常被称为“意大利面条式编程”。
这种个人英雄主义的单打独斗在解决小规模问题时勉强可以，但程序规模的不断扩大，一大堆的问题凸显出来:程序质量低下，进度延误，预算严重超支，就是“软件危机”，给程序开发的前景蒙上了一层暗淡的色彩。
结构化程序设计方法就是在这个背景下提出的，除了前面章节中讲过的3种控制结构:顺序、分支和循环外，结构化程序设计的另-一个关键概念是模块化设计。
模块化#生活中常常接触到模块化的概念，模块化程序设计大致有点像小时候玩的积木游戏，用木块组合的方式很容易地就构筑起了“大厦”。模块化至少有两点好处: 一是封装，“积木块”是“基本砖块”的组合，对外是个整体，使用方便，二是可复用，“柱子”封装好后，既可以用在这个建筑上，又可以用在那个建筑上。程序设计也可以借鉴这一思想，用模块化的方法进行程序设计，函数正是模块化方法的体现。
虽说语句是BDL语言的基本单位，但从程序设计总体把握上来看，将函数视为一个整体，大大降低了问题的复杂程度。在解决复杂问题时，首先考虑的是问题的概貌，而不是微小细节，这是人的思维和行动习惯，程序设计也是如此，先将问题分割成-一个个函数，每个函数实现特定的功能，确定函数之间的联系和依赖关系，这是从整体解决某个问题。其次才是考虑每个函数怎么写，算法流程怎么走这些问题，这就是“分而治之、逐步求精”的设计方法学。
函数的调用过程#BDL语言是由函数组成的，本章前面以及介绍了函数的定义、声明和调用等基础只是，下面来看一下函数的调用过程，即不同函数是和配合的。如图：
flowchart TDsubgraph a[&#34;main&#34;]e[&#34;函数1&#34;]--&gt;f[&#34;函数2&#34;]endsubgraph b[&#34;函数1&#34;]i[&#34;语句1&#34;]--&gt;g[&#34;函数3&#34;]g--&gt;h[&#34;语句2&#34;]endsubgraph c[&#34;函数2&#34;]j[&#34;...&#34;]endsubgraph d[&#34;函数3&#34;]k[&#34;...&#34;]ende--&#34;call&#34;--&gt;bb--&#34;return&#34;--&gt;ef--&#34;call&#34;--&gt;cc--&#34;return&#34;--&gt;fg--&#34;call&#34;--&gt;dd--&#34;return&#34;--&gt;g一个入库一个出口#结构化程序设计主张使用顺序、选择、循环3种基本结构来嵌套连接成具有复杂层次的“结构化程序”，严格控制goto语句的使用。
需要强调的一点是，对单个模块而言，只有一个人口，一个出口。这是一种从上到下的流程式方法，减少了模块间的相互联系，使模块可作为插件或积木使用，降低程序的复杂性，提高可靠性。
封装和可重用#可作为插件或积木使用的模块具有很强的可重用性，完全可用在其他同类型的问题中，省却了将算法重写一遍的麻烦。对一些规模较大的商业软件公司来说，模块的积累是笔巨大的财富，到达一定的规模后，解决问题时要重新写的代码和模块很少，从库中挑选出需要的模块，拼装组合就形成了满足要求的程序。而且，如果在模块编制中注重算法的效率等因素，采用这种插件组合的方式可以很容易产生出高质量的软件产品。
下面来看一下封装性。在模块化程序设计中，模块内部的结构，对其他模块来说是不重要的，以函数为例来说明，BDL语言中，函数可看成是一个封装体，将一系列相关的、实现某一功能的代码封装起来，并提供了一个使用方法(程序开发中常称接口)，通过该接口可以在程序的任何地方使用这些代码完成特定的功能，至于函数是如何编写的，可能并不是用户关心的重点，用户真正关心的是这个函数如何使用。这就意味着，函数内定义的变量等，外部是不能访问的，为此，引入“内聚”和“耦合”的概念。
高内聚，低耦合#既然模块化设计有那么多的好处，那是不是可以不管三七二十-地把整个程序简单地分解成一个个程序段呢?答案是否定的，模块的划分有条准则，即“相对独立，功能单一”。也就是说，一个好的模块必须具有高度的独立性和相对较强的功能，这通常用“耦合度&amp;quot;、“内聚度”两个指标从不同侧面而加以度量。
耦合度，是指模块之间相互依赖性大小的度量，耦合度越小，模块的相对独立性越大。内聚度，是指模块内各成分之间相互依赖性大小的度量，内聚度越大，模块各成分之间联系越紧密，其功能越强。
在模块划分时应当做到“耦合度尽量小，内聚度尽量大”。</description>
    </item>
    
    <item>
      <title>5.练习</title>
      <link>https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/5.practice/</link>
      <pubDate>Thu, 20 Jul 2023 13:39:23 +0800</pubDate>
      
      <guid>https://bdl.darcyjoven.com/docs/BDL/2.medium/10.function/5.practice/</guid>
      <description>联系#自定义一个函数，计算你的存款利率。#例如输入10000块钱，定期存款3个月，那么3个月后你拥有多少钱？
假设月利息3.1%</description>
    </item>
    
  </channel>
</rss>
